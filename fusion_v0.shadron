//Global illumination
#include <math_constants>
#define π PI
#define τ TAU
#define φ 1.61803398875
#define IOR 1.333

image noise =		file("blunoize_n&b.png")  : hidden();
image normal_noise = file("blunoize_norm.png") : hidden();
image albedo =	   file ("albedo.png")	   : hidden();
image skysphere =	file("sphere_skybox_alt.png");
image depth =		file("depth.png")		 : hidden();
image norm =		 file("norm.png")		  : hidden();
image spec =		 file("spec.png")		  : hidden();
image light =		file("self.png")		  : hidden();

param bool moving_light       = true  ;
param bool shadows            = false ;
param bool advanced_diffuse   = true  ;
param bool advanced_specular  = true  ;
param bool ssao               = false ;
param bool advanced_ssao	  = false ;
param bool orb                = true  ;

param float scale			  = .5   : range(.1, 1);

param float γ				  = 2.2  : range(1., 3.);
param float speed			  = .01  : range(0., .1);
param float persp_corr		  = 0.2;

// light
param vec3  light_place       = vec3(.5,.65,.5);
glsl  vec3  light_intensity   = vec3(.8,.8,.8);
param float light_str         = .2 : range(0., 1.);
param vec3  light_color       = vec3(.5, .5, .5) : color();
param float ambient_str       = 0 : range(0., 1);
param vec3  ambient_color     = vec3(.5, .5, .5) : color();
param float skysphere_str     = 0 : range(0., 1);
// Screen space shadow
param float dither  = 1.;

param int   big_steps = 10 : logrange (1, 100);
param float depth_tolerance_light = .02 : range (0.,.01);
param float depth_threshold_light = .3 : range(0.,.3);

param int   ssao_samples          = 8 : range(1, 64);
param float ssao_radius           = 0.2 : range(0, 1);
param float ssao_tolerance        = 0.01 : range(0, 0.1);
param float ssao_max_depth        = 1 : range(0, 1);
param float accel = .1;
param float depth_tolerance_gi = .02 : range (0.,.01);
param float depth_threshold_gi = .3 : range(0.,.3);
param int nb_steps = 2 : range(1, 4);



// Noise function :
// texture(noise, (scale*2*pos*sizeof(diffuse)+floor(sizeof(noise)*vec2((sin(1000*time)),(cos(1000*time)))))/sizeof(noise)).g

glsl float sqdist(vec3 a, vec3 b){
	a-=b;
	a*=a;
	return a.x + a.y + a.z;
}


glsl vec3 linearize(vec3 col){
	return vec3(
		pow(col.r, γ),
		pow(col.g, γ),
		pow(col.b, γ));
}


glsl vec3 delinearize(vec3 col){
	return vec3(
		pow(col.r, 1./γ),
		pow(col.g, 1./γ),
		pow(col.b, 1./γ));
}




glsl vec3 get_albedo(vec2 position){
	return linearize(texture(albedo, position).rgb);
}

glsl vec3 get_normal(vec2 position){
	return texture(norm, position).rgb-.5;
}

glsl float get_roughness(vec2 position){
	return .0001+texture(spec, position).r*texture(spec, position).r;
}

glsl float get_depth(vec2 position){
	return texture(depth, position).r;
}


glsl float get_noise(vec2 pos, float time){
	return (texture(noise,
		(floor(scale*pos*sizeof(albedo)+sizeof(noise)*vec2(10*time,10*φ*time)))/sizeof(noise))).x;
}


/* Material models */

//Diffuse
glsl float lambert(vec3 l, vec3 n){
	return max(0., dot(l, n));
}

glsl float oren_nayar(vec3 l, vec3 n, float σ){//vec v ?
	// Direction toward the viewer
	vec3 v = vec3(0,0,1);
	// Taken from http://shaderjvo.blogspot.com/2011/08/van-ouwerkerks-rewrite-of-oren-nayar.html
	// Equivalent to Oren Nayar.
	// Maybe consider this improved oren-nayar for later use :
	// http://mimosa-pudica.net/improved-oren-nayar.html

	float σ² = σ * σ;
	vec2 oren_nayar_fraction = σ² / (σ² + vec2(0.33, 0.09));
	vec2 oren_nayar = vec2(1, 0) + vec2(-0.5, 0.45) * oren_nayar_fraction;
	// Theta and phi
	vec2 cosθ  = clamp(vec2(dot(n, l), dot(n, v)), 0, 1);
	vec2 cosθ² = cosθ * cosθ;
	float sinθ = sqrt((1-cosθ².x) * (1-cosθ².y));

	vec3 light_plane = normalize(l - cosθ.x * n);
	vec3 view_plane  = normalize(v - cosθ.y * n);
	float cosΦ = clamp(dot(light_plane, view_plane), 0, 1);

	float diffuse_oren_nayar = cosΦ * sinθ / max(cosθ.x, cosθ.y);
	float diffuse_light = cosθ.x * (oren_nayar.x + oren_nayar.y * diffuse_oren_nayar);

	return diffuse_light;
}

glsl float blinn_phong(vec3 l, vec3 n, float σ){
	if(dot(l, n) < 0){
		return 0.;
	}
    // Direction toward the viewer
    vec3 v = vec3(0, 0, 1);
	// Average of viewer and light direction
	vec3 h = normalize(l + v);
	float shininess = 2./(σ*σ) - 2.;
	// 4 times the phong shininess
	return pow(max(0, dot(h, n)), 4 * shininess);

}

//Specular
glsl float modified_blinn_phong(vec3 l, vec3 n, float σ){

	if(dot(l, n) < 0){
		return 0.;
	}
	// Direction toward the viewer
	vec3 v = vec3(0, 0, 1);
	// Average of viewer and light direction
	vec3 h = normalize(l + v);


	// custom part
	float shininess = .5/(σ*σ) -.5;
	float multiplier = 2.5*(IOR-1)*pow(1+σ,-10);

	// 4 times the phong shininess
	return 1000*multiplier*pow(max(0, dot(h, n)), 4 * shininess);

}

// /!\ HEAVY /!\
// x component for the specular reflection
// the y component is for light which will be used by the diffuse
glsl vec2 cook_torrance(vec3 l, vec3 n, float σ){

	// Direction toward the viewer
	vec3 v = vec3(0, 0, 1);
	// Average of viewer and light direction
	vec3 h = normalize(l + v);

	float HdotN = dot(h, n);
	float VdotN = dot(v, n);
	float LdotN = dot(l, n);
	float VdotH = dot(v, h);

	if(LdotN < 0){
		return vec2(0, 1);
	}

	//Precalculations for Beckmann
	float m² = σ * σ;//m is the rms of surface microfacet, which is σ, the standard deviation of our gaussian distribution of microfacets
	// α is never directly used, only cos²α in our simplified formula
	// So we can replace cos²α with HdotN²
	float cos²α = HdotN * HdotN; //Equivalent but less costly

	float cos⁴α = cos²α * cos²α;
	float tan²α_over_m² = (1 - cos²α) / (cos²α * m²);
	// Beckmann distribution
	float D = exp(-tan²α_over_m²) / (π * m² * cos⁴α);

	// Fresnel
	// using Schlick's approximation

	float n₁ = 1.00029;//Air
	float n₂ = IOR;

	float R₀ = (n₁ - n₂) / (n₁ + n₂);
	R₀ *= R₀;
	float schlick = R₀ + (1 - R₀) * pow(1 - VdotN, 5);
	float F = schlick;

	// Geometric attenuation term.
	// Can probably be simplified a lot, only difference being VdotN or LdotN
	float G = min(
		1,
		min(
			2 * HdotN * VdotN / VdotH,
			2 * HdotN * LdotN / VdotH
			)
		);
	float final = D * F * G / (4 * VdotN * LdotN);
	return vec2(final, 1 - F);// Return as y the complementary to Fresnel to use for diffuse illum
}


glsl vec3 light_orb(vec3 pos, vec3 light_pos){
	float strength = 0.001;
	return light_str * strength * light_color / sqdist(vec3(pos.xy, 0),vec3(light_pos.xy,0));

}


glsl bool raybtween(vec3 a, vec3 b, float x_multiplier, float time){
	vec3 curr_place = a;
	float myrand = dither*get_noise(curr_place.xy, time);
	a.x /= x_multiplier;
	curr_place.x/= x_multiplier;
	b.x /= x_multiplier;
	float curr_depth = 0.;

	for(int i=0; i<big_steps; i++){

		//eco de mémoire : utilisation de curr_depth pour le mix
		curr_depth = (i+myrand)/float(big_steps);
		curr_place = mix(a, b,curr_depth);
		//fixe au pixel le plus proche
		curr_place.xy = (floor(curr_place.xy*sizeof(depth)))/sizeof(depth);


		//Dès qu'on sort, c'est bon.
		if(	curr_place.x <= 0. || curr_place.x >= 1.
		 || curr_place.y <= 0. || curr_place.y >= 1.
		 || curr_place.z <= 0. || curr_place.z >= 1.
		){return true;}

		//Collision
		curr_depth = texture(
			depth,
			(curr_place.xy)).g;
		if ( curr_depth > curr_place.z + depth_tolerance_light
			&& curr_depth < curr_place.z + depth_threshold_light
		){return false;}

	}

	return true;
}

glsl float SSAO(vec2 pos, float time){
	float screen_ratio = sizeof(albedo).x/sizeof(albedo).y;
	float start_depth = get_depth(pos);
	float random = dither * get_noise(pos, time);
	float accum = 0;
	for(int i = 0; i<ssao_samples; i++){
		float local_i = i+dither*random;
		float curr_rotat = τ*local_i*φ;
		vec2 currxy = pos + local_i * ssao_radius * vec2(cos(curr_rotat), sin(curr_rotat)) / ssao_samples;
		if(currxy.x >= 1 || currxy.x <= 0 || currxy.y >= 1 || currxy.y <= 0){
			accum +=1;
		}else{
			float curr_depth = get_depth(currxy/vec2(screen_ratio, 1));
			if (curr_depth <= start_depth + ssao_tolerance || curr_depth >= start_depth + ssao_max_depth){
				accum += 1.;
			}
		}
	}
	return accum/ssao_samples;
}

animation ssao_filter = glsl(SSAO, scale*sizeof(albedo));


glsl vec3 get_light_place(float time){
	if(moving_light){
		return light_place + vec3(.1*cos(.5*time),.1*sin(.6*time),.2*sin(.7*time));
	}else{
		return light_place;
	}
}

glsl vec3 direct_lighting(vec2 pos, float time){
	vec2 screen_ratio = sizeof(albedo);

	float depth  = texture(depth, pos).g;
	vec3  albedo = get_albedo(pos);
	float σ      = get_roughness(pos);
	vec3  n      = get_normal(pos);

	//Juste pour l'animation
	vec3 new_place = get_light_place(time);
	vec3 curr_place = vec3(pos,depth);
	new_place.x *= screen_ratio.x / screen_ratio.y;
	curr_place.x*= screen_ratio.x / screen_ratio.y;

	vec3 l = normalize(new_place-curr_place);


	float diffuse = lambert(l, n) ;
	vec2  cook    = cook_torrance(l, n, σ);
	float spec    = cook.x;

	// diffuse_str *= cook.y;a
	float sqdist = sqdist(new_place, curr_place);

	if(!shadows || (shadows && raybtween(curr_place, new_place, screen_ratio.x / screen_ratio.y, time))){
		return light_str * light_color * (albedo * diffuse + spec) / sqdist;
	}else{
		return vec3(0);
	}
}

animation direct_lighted =glsl(direct_lighting, scale*sizeof(albedo)) : hidden();

glsl vec3 indirect_lighting(vec2 pos, float time){;
	vec3 albedo = get_albedo(pos);
	vec3 ambient = ambient_str * ambient_color;
	vec3 color = albedo * ambient;
	if (ssao) {
		color *= texture(ssao_filter, pos).rgb;
	}
	return color;
}

animation indirect_lighted = glsl(indirect_lighting, scale*sizeof(albedo)) : hidden();


glsl vec3 ray_launch(vec3 pos, vec3 dir, float time){

	vec3 curr_place;
	vec3 corr_dir = dir + vec3((pos.xy-.5)*persp_corr,0.);
	float curr_depth ;
	float i_float=0;
	float random = get_noise(pos.xy, time);
	for(int i=0; i<ssao_samples; i++){
		i_float = i + random;
		curr_place = pos + (i_float*speed + accel*pow(i_float, 2.))*corr_dir;

		//Dès qu'on sort, skysphere
		if(curr_place.x < 0. || curr_place.x > 1.
		|| curr_place.y < 0. || curr_place.y > 1.
		|| curr_place.z < 0. || curr_place.z > 1.
		){
			return skysphere_str * linearize(texture(skysphere, dir.xy+.5).rgb);
		}

		curr_depth = texture(depth, curr_place.xy).g;
		//Si on se prend qqchose
		if (curr_depth > curr_place.z + depth_tolerance_gi){
			if(curr_depth < curr_place.z + depth_threshold_gi){
				return linearize(texture(direct_lighted, curr_place.xy).rgb);
			}else{
				return vec3(0.);
			}
		}
	}
	return linearize(texture(skysphere, dir.xy+.5).rgb);
}



glsl vec3 skysphere_illum (vec2 pos, float time){
	vec3 total_light = vec3(0.);
	vec3 norm_ray = normalize(texture(norm, pos).xyz-.5);
	vec3 norm_rand =
		1.*(texture(normal_noise,
			(pos*sizeof(albedo)+floor(sizeof(normal_noise)*vec2((sin(1000*time)),(cos(1000*time)))))/sizeof(noise)).xyz-.5);

	vec3 norm_launch;
	for(int x=0; x<nb_steps; x++){
		for(int y=0; y<nb_steps; y++){
			norm_launch = (vec3(x, y,1.)+.5+norm_rand)/nb_steps-.5;
			norm_launch.z = 1.-pow(norm_launch.x*norm_launch.x+norm_launch.y*norm_launch.y,.5);
			norm_launch = .5+.5*
				normalize (
				norm_ray + norm_launch);
			if (advanced_ssao) {
				if(norm_launch.z>0.){
					total_light += ray_launch(vec3(pos, (texture(depth, pos).g)), (norm_launch-.5), time);
				}else{
					return vec3(0.);
				}
			} else {
				if(norm_launch.z>0.){
					total_light += skysphere_str * linearize(texture(skysphere, norm_launch.xy).rgb);
				}else{
					return vec3(0.);
				}
			}
		}
	}
	total_light/=float((nb_steps)*(nb_steps));
	if(ssao){
		total_light *= texture(ssao_filter, pos).rgb;
	}
	return total_light;
}

animation sky_ill = glsl(skysphere_illum, scale*sizeof(albedo)) : hidden();
glsl vec3 skylight_vis(vec2 pos, float time){
	return delinearize(texture(sky_ill, pos).rgb);
}

animation sklight_visualisation = glsl(skylight_vis, scale*sizeof(albedo));



glsl vec3 total_lighting(vec2 pos, float time){
	vec2 screen_ratio = sizeof(albedo);

	float depth  = texture(depth, pos).g;
	vec3  albedo = get_albedo(pos);
	float σ      = get_roughness(pos);
	vec3  n      = get_normal(pos);

	//Juste pour l'animation
	vec3 new_place = get_light_place(time);
	vec3 curr_place = vec3(pos,depth);
	new_place.x *= screen_ratio.x / screen_ratio.y;
	curr_place.x*= screen_ratio.x / screen_ratio.y;

	vec3 l = normalize(new_place-curr_place);


	float diffuse = lambert(l, n) ;
	vec2  cook    = cook_torrance(l, n, σ);
	float spec    = cook.x;

	vec3 color = vec3(0);
	color += texture(indirect_lighted, pos).rgb;
	color += texture(direct_lighted, pos).rgb;
	color += albedo*texture(sky_ill, pos).rgb;


	if (orb){
		color += light_orb(curr_place, new_place);
	}
	return delinearize(color);
}

animation total_lighted = glsl(total_lighting, scale*sizeof(albedo));



//Copycut sale
glsl vec3 final_light(vec2 pos, float time){
	vec3 total_light = vec3(0.);

	total_light += texture(direct_lighted, pos).rgb;
	total_light += texture(indirect_lighted, pos).rgb;


	return delinearize(total_light);
}

// animation second = glsl(final_light, scale*sizeof(albedo));
